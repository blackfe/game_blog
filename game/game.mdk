Title         : 游戏

Author        : blackfe
Email         : blackfe2010@gmail.com


[INCLUDE=book]
[INCLUDE=webtoc]
[INCLUDE=webanchors]

[TITLE]

~ Begin SidePanel
[TOC]
~ End SidePanel

~ Begin MainPanel

# 客户端     { #sec-intro }

## 配置

### 策划配表方式
1. Excel
主流使用Excel导出各种数据
2. xml


主流方式

### 导出格式
1. lua
``` lua
local data = {
  switch = {heroId = 1,hp = 2}
  [1] = {10001,100},
  [2] = {10002,200}
}
return data
```
这种格式类似于CSV 优点是把key放到switch中，这样row data里面没有key，节省空间。但是解析的时候需要转换。有一定的性能损耗
如果使用Lua的项目可以直接读取。
2. json
``` json
[
  {
		"heroId": 10001,
		"hp": 100
  },
  {
		"heroId": 10002,
		"hp": 200
  }
]
```

也是非常 通用的配置表格式,各种语言都能有第三方库扩展，缺点，在纯lua的项目里性能应该没有luaTable高，在lua和C#/C++混用的项目里
说不定可以作为通用的配置表结构
3. xml
游戏应该不会使用这种结构，因为结构太复杂，解析也很费劲
4. bytes
在C++和C#项目里使用，解析快，存储空间小。但是基本没法热更新（IOS）。
``` c++
struct HeroInfo
{
  int heroId;
  int Hp
}
map<int,HeroInfo> heroData;
HeroInfo GetHeroInfo(int heroId)
{
  return heroData[heroId]; 
}
```
使用sdp存储，文件大小减小（意义不大），实际使用内存一样，解析耗时稍微长一点
5. csv
``` csv
heroId,hp
10001,100
10002,200
```
也是非常通用的配置格式，优点是默认字段可以省略，所以文件大小会小很多，效率没有原始的LuaTable或者bytes快


### 总结
在C#/C++的项目里使用 bytes比较好，sdp意义不大，在lua项目里使用luatable比较好。

## 资源加载

###资源加载接口
- Resources
Resources接口加载的资源必须要位于“Resources”文件夹下，这个接口基本上是为了本地快速制作DEMO而设计的。
不适用于商业化的项目研发
- AssetsDataBase
这个接口需要UnityEditor,它的主要作用是在资源导入时对资源做一些编辑。加载速度也比AssetBundle快（需要验证）
- AssetsBundle
如果是加载本地资源的话优先推荐这个接口。
- WWW（废弃）
- UnityWebRequest

## 资源卸载

###资源加载路径

## UI

### 画布(Canvas)
Canvas 有三种模式
- Screen Space - Overlay
  这种模式Canvas下的UI会画在所有相机的最前面
- Screen Space - Camera
  这种模式Canvas下的UI会受到Camera的影响，始终跟随Camera移动
- World Space
  这种模式下Canvas下的UI表现会和其他场景中的物体一样，可以自由设置Transform
  
  

### NGUI和UGUI的区别
### UGUI的主要控件
### UI优化

## 渲染

## 物理

## 网络

###协议
#### TCP
可靠
有序
连接时需要三次握手。
发送者发送一个数据包给接收者，接收者受到数据包后要返回确认信息给发送者。
如果数据包没有收到，发送者会重新发送这个数据包.

#### UDP
不需要连接
不可靠，需要处理丢包的情况
无序，拿到数据包需要排序
有些国家和地区对UDP支持很差.
发送者一口气把所有的包发给接收者，发送者不会关心接收者有没有收到这个包。在复杂的网络环境下，后发的包有可能先收到。
所以UDP传送数据包时通常会附带前几帧的冗余数据。这样丢包的情况下也能最大可能的保证数据的完整性。

### 数据序列化
- sdp
- protocol buffer
大体上两种协议是差不多的，sdp更加的精简，pb能够支持更多的功能。比如Oneof,Json mapping,Options，还有pb基本支持了市面上的所有主流语言


Encode 优化
Base 128 Varints
把一个整形数据压缩成一个或多个字节。从第二个字节开始，用最高位标识有没有更多的字节。相当于牺牲一位来达到整形变长的目的



### 网络库


## 动画

## 声音

## 平台

## 导航和寻路





~ End MainPanel